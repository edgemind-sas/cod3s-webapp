events {}

http {
    # Include MIME types
    include       mime.types;
    default_type  application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Upstream backend server configuration
    upstream backend {
        server api:${BACKEND_PORT};  # Connects Nginx to the backend container via dynamic port
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name yourdomain.com;

        return 301 https://$host$request_uri;
    }

    # HTTPS server configuration
    server {
        listen 443 ssl;
        server_name yourdomain.com;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Serve the frontend application
        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        # Proxy requests to the backend API
        location /api/ {
            proxy_pass http://backend;  # Redirects /api/ requests to the backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        # Enable Gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_proxied any;
        gzip_min_length 1024;
        gzip_vary on;

        # Logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}
